OOPS:- object oriendted programmings
 * javascript has inherited some features from java
 * main pillars of java
 =>encapluslation:- Hiding the implementation details.  In which one thing is included with other
     thing so that inclusive things will not appear. 
     ex:-  whatsapp
  =>polymorphism:- a way to achieve a single action in different ways.
     ex:-  Myself
     =>Inheritance.
 =>Classess and Objects.
 //class=> It is collection of properties, methods and objects. 
           class is defined by using the class keyword
       syntax:-
       class classname{
         properties
         methods
         objects
       }    
       example:-
           class movie{
           rating,review,actor,actress,director,genere,music director,DOP
           }

 Objects:-  * It is called as the real time entity. (touch and feel)
            * objects are specific to the class.    
         syntax:-
            var objectname = new classname();
       New:-new is a keword used to create an instance of the object.
          =>constructor:-  to store the value inside the object. Automatically creates when class is created.
          =>this:- It is the temporary keyword which is pointing to the freshly created objects.
          - -   - - -  - - - - -- - - - - - - - - - - - - - - - - -            
          //example of constructor
class Car{
    constructor(brand,color){
    this.brand = brand;    //key = value //c(brand => obj(brand)) //audi
    this.color = color;    //block
    }
} 
var obj = new Car("audi","block");
console.log(obj.color);
console.log(obj.brand);
- - - - - - - - - - - - - - -- - - - - - - - - - -
class Person{
    constructor(names,age,gender,salary){
        this.name = name;
        this.age = age;
        this.gender= gender;
        this.salary = salary;
    }
}
const obj =  new person("vignesh",25,"male",35000)
console.log(obj.names)

- - -- - - - - -- - -- -  - - -- - -- - -- -- - -- 
//!class with methods

class Car{
  drive(){
    console.log("driving the car")
  }
  break(){
    console.log("applying the break")
  }
}
const car1 = new Car();
car1.drive();
car1.break();
- - - - - -- - - -- - -- - - - - -- - -- -  - - -- - -
setter/getters:-
  get => get user data
        =>binds an object property to a function when the property is accepted.
  set => set user data
        => binds an object prperty to a function when the property is assigned with a value.
  //example
  const users = {
    get name(){
        console.log("getting a namee");
        return this._name;
    }
    set name(){
      console.log("setting a name"+" "+n)
      this._name = n;
    }
  }            
  users.name = "john";
  console.log(users.name);
